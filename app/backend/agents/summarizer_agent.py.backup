from crewai import Agent, Task
from app.backend.tools.visualization_tool import VisualizationTool
from app.backend.tools.interpretation_tool import InterpretationTool
from app.backend.prompts.prompt import SUMMARIZER_AGENT, SUMMARY_TASK_TEMPLATE
from app.backend.config import SUMMARIZER_LLM
from typing import Optional, List

class SummarizerAgent:
    def __init__(self):
        self.visualization_tool = VisualizationTool()
        self.interpretation_tool = InterpretationTool()
    
    def get_agent(self) -> Agent:
        """
        Create and return the summarizer agent with enhanced configuration
        """
        return Agent(
            role=SUMMARIZER_AGENT["role"],
            goal=SUMMARIZER_AGENT["goal"],
            backstory=SUMMARIZER_AGENT["backstory"],
            tools=[
                self.visualization_tool.get_tool(),
                self.interpretation_tool.get_tool()
            ],
            llm=SUMMARIZER_LLM,
            verbose=True,
            memory=True,  # Enable memory for maintaining context
            respect_context_window=True,  # Prevent token limit issues
            max_retry_limit=3  # Add resilience for tool usage
        )
    
    def create_summary_task(self, question: Optional[str] = None, context: Optional[List[Task]] = None) -> Task:
        """
        Create summary task for interpreting results
        """
        # Base description
        base_description = (
            "Create a comprehensive summary of the heat equation analysis.\n"
            "Combine research findings with metrics analysis.\n"
            "Include visualizations and practical recommendations."
        )
        
        # Add context from previous tasks if available
        previous_analyses = ""
        if context:
            if len(context) > 0:
                previous_analyses += f"\nMetrics Analysis:\n{context[0].output}\n"
            if len(context) > 1:
                previous_analyses += f"\nResearch Findings:\n{context[1].output}\n"
        
        # Add question context if provided
        if question:
            description = (
                f"Question to address: {question}\n\n"
                f"{previous_analyses}\n"
                f"{base_description}"
            )
        else:
            description = f"{previous_analyses}\n{base_description}"
        
        return Task(
            description=description,
            expected_output=(
                "A structured summary containing:\n"
                "1. Key findings and patterns\n"
                "2. Technical analysis and insights\n"
                "3. Practical implications\n"
                "4. Recommendations and visualizations"
            ),
            agent=self.get_agent(),
            context=context
        ) 